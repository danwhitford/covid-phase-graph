{"version":3,"sources":["repos/ukdash.js","components/PhaseChart.js","App.js","reportWebVitals.js","index.js"],"names":["cache","Map","getData","xAxisDim","yAxisDim","has","get","structure","areaName","date","newAdmissions","covidOccupiedMVBeds","structureString","encodeURI","JSON","stringify","url","console","log","fetch","then","res","json","j","set","axesDims","a","x","value","y","raw","data","sort","b","Date","map","row","PhaseChart","useState","chartData","setChartData","undefined","scatterChart","setScatterChart","useEffect","shapeData","ctx","document","getElementById","Chart","type","options","scales","xAxes","position","scaleLabel","display","labelString","label","yAxes","tooltips","callbacks","item","itemData","datasets","datasetIndex","index","legend","backgroundColor","context","chroma","scale","mode","colors","dataset","length","dataIndex","update","className","style","width","id","height","axesOptions","App","setAxesDims","onChange","e","backgroundImage","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c672181c.chunk.js","sourcesContent":["import fetch from \"cross-fetch\";\n\n// 'https://api.coronavirus.data.gov.uk/v1/data?filters=areaType=overview&structure=%7B\"areaName\":\"areaName\",\"date\":\"date\",\"newCasesBySpecimenDate\":\"newCasesByPublishDate\"%7D' \\\n\nconst base = \"https://api.coronavirus.data.gov.uk/v1/data\";\n\nconst cache = new Map()\n\nexport const getData = (xAxisDim, yAxisDim) => {\n    if (cache.has(`${xAxisDim}:${yAxisDim}`)) {\n        return cache.get(`${xAxisDim}:${yAxisDim}`)\n    }\n\n  const filterString = \"filters=areaType=overview\";\n  const structure = {\n    areaName: \"areaName\",\n    date: \"date\",\n    newAdmissions: xAxisDim,\n    covidOccupiedMVBeds: yAxisDim,\n  };\n  const structureString = `structure=${encodeURI(JSON.stringify(structure))}`;\n\n  const url = `${base}?${filterString}&${structureString}`;\n\n  console.log(\"url:\", url);\n\n  return fetch(url).then((res) => res.json()).then(j => {\n      cache.set(`${xAxisDim}:${yAxisDim}`, j)\n      return j\n  });\n};\n","import Chart from \"chart.js\";\nimport { useEffect, useState } from \"react\";\nimport chroma from \"chroma-js\";\nimport { getData } from \"../repos/ukdash\";\n\nasync function shapeData(axesDims) {\n  const raw = await getData(axesDims.x.value, axesDims.y.value);\n\n  return raw.data\n    .sort((a, b) => new Date(a.date) - new Date(b.date))\n    .map((row) => {\n      return {\n        x: row.newAdmissions,\n        y: row.covidOccupiedMVBeds,\n        date: row.date,\n      };\n    });\n}\n\nfunction PhaseChart({axesDims}) {\n  const [chartData, setChartData] = useState([]);\n  const [scatterChart, setScatterChart] = useState(undefined);\n\n  useEffect(() => {\n    shapeData(axesDims).then((res) => setChartData(res));\n  }, [axesDims]);\n\n  useEffect(() => {\n    const ctx = document.getElementById(\"myChart\");\n    const scatterChart = new Chart(ctx, {\n      type: \"scatter\",\n      options: {\n        scales: {\n          xAxes: [\n            {\n              type: \"linear\",\n              position: \"bottom\",\n              scaleLabel: {\n                display: true,\n                labelString: axesDims.x.label,\n              }\n            },\n          ],\n          yAxes: [\n            {\n              type: \"linear\",\n              position: \"left\",\n              scaleLabel: {\n                display: true,\n                labelString: axesDims.y.label,\n              }\n            }\n          ]\n        },\n        tooltips: {\n          callbacks: {\n            label: (item, data) => {\n              const itemData =\n                data.datasets[item.datasetIndex].data[item.index];\n              return [itemData.date, `(${itemData.x}, ${itemData.y})`];\n            },\n          },\n        },\n        legend: {\n          display: false\n        }\n      },\n    });\n    setScatterChart(scatterChart);\n  }, []);\n\n  useEffect(() => {\n    if (!scatterChart) {\n      return;\n    }\n\n    scatterChart.data = {\n      datasets: [\n        {\n          data: chartData,\n          backgroundColor: (context) => {\n            return chroma\n              .scale([\"#fee8c8\", \"#e34a33\"])\n              .mode('lab')\n              .colors(context.dataset.data.length)[context.dataIndex];\n          },\n        },\n      ],\n    };\n    scatterChart.update();\n  }, [chartData, scatterChart]);\n\n  return (\n    <div className=\"chart-container\" style={{ width: \"60%\" }}>\n      <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n    </div>\n  );\n}\n\nexport default PhaseChart;\n","import { useState } from 'react';\nimport Select from 'react-select'\nimport PhaseChart from './components/PhaseChart'\nimport './App.css'\n\nconst axesOptions = [\n  {\n    value: 'newAdmissions',\n    label: 'New admissions'\n  },\n  {\n    value: 'covidOccupiedMVBeds',\n    label: 'COVID-19 occupied beds with mechanical ventilators'\n  },\n  {\n    value: 'newCasesByPublishDate',\n    label: 'New cases by publication date'\n  },\n  {\n    value: 'newCasesBySpecimenDate',\n    label: 'New cases by specimen date'\n  },\n  {\n    value: 'newDeaths28DaysByPublishDate',\n    label: 'New deaths within 28 days of a positive test'\n  },\n  {\n    value: 'newDeaths28DaysByDeathDate',\n    label: 'New deaths within 28 days of a positive test by death date (very spiky)'\n  }\n]\n\nfunction App() {\n  const [axesDims, setAxesDims] = useState({ x: axesOptions[0], y: axesOptions[1] })\n\n  return (\n    <div className=\"App\">\n      <PhaseChart\n        axesDims={axesDims}\n      />\n\n      <div className='SelectContainer'>\n        <label>\n          X axis dimension\n      <Select\n            value={axesDims.x}\n            options={axesOptions}\n            onChange={e => {\n              setAxesDims({\n                ...axesDims,\n                x: e,\n              })\n            }}\n          />\n        </label>\n      </div>\n\n      <div className='SelectContainer'>\n        <label>\n          Y axis dimension\n      <Select\n            value={axesDims.y}\n            options={axesOptions}\n            onChange={e => {\n              setAxesDims({\n                ...axesDims,\n                y: e,\n              })\n            }}\n          />\n        </label>\n      </div>\n\n      <p>Colours represent time with earlier entries being lighter and later entries darker</p>\n      <div style={{\n        height: '30px',\n        width: '300px',\n        backgroundImage: 'linear-gradient(to right, #fee8c8, #e34a33)',\n      }}></div>\n      <p>Data is taken from the <a href='https://coronavirus.data.gov.uk/'>Gov.Uk COVID dashboard</a>, via <a href='https://coronavirus.data.gov.uk/details/developers-guide'>the API</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}